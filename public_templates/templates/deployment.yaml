apiVersion: apps/v1
kind: Deployment
metadata:
  {{- if eq .Values.canary.enabled "true" }}
  name: {{ .Values.service.name }}-canary
  {{- else }}
  name: {{ .Values.service.name }}
  {{- end }}
  namespace: {{ .Values.namespace }}
  labels:
    {{- if eq .Values.canary.enabled "true" }}
    app: {{ .Values.service.name }}
    track: canary
    {{- else }}
    app: {{ .Values.service.name }}
    {{- end }}
spec:
  selector:
    matchLabels:
      {{- if eq .Values.canary.enabled "true" }}
      app: {{ .Values.service.name }}
      track: canary
      {{- else }}
      app: {{ .Values.service.name }}
      {{- end }}
  {{- if eq .Values.canary.enabled "true" }}
  replicas: {{ .Values.canary.replicaCount | default "1"}}
  {{- else }}
  replicas: {{ .Values.replicaCount | default "1"}}
  {{- end }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: {{ .Values.service.maxsurge | default "10%" }}
      maxUnavailable: {{ .Values.service.maxunavailable | default "25%" }}
  template:
    metadata:
      annotations:
        rollme: {{ randAlphaNum 5 | quote }}
      labels:
        language: {{ .Values.service.language }}
        app.kubernetes.io/managed-by: Helm
        meta.helm.sh/release-namespace:  {{ .Values.namespace }}
        meta.helm.sh/release-name: "{{ .Values.namespace }}-{{ .Values.service.name }}"
        {{- if eq .Values.canary.enabled "true" }}
        app: {{ .Values.service.name }}
        track: canary
        version: "{{ .Values.canary.imagetag }}"
        {{- else }}
        app: {{ .Values.service.name }}
        version: "{{ .Values.image.tag }}"
        {{- end }}
    spec:
      {{- if eq .Values.namespace "spatio-pt" }}
      nodeSelector:
        kubernetes.io/os: linux
        pt: "true"
      {{- end }}
      {{- if eq .Values.namespace "spatio-pt" }}
      tolerations:
      - effect: NoSchedule
        key: pt
        operator: Equal
        value: "true"
      {{- end }}
      enableServiceLinks: false
      {{- if ne .Values.namespace "spatio-pt" }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- range $key, $val := .Values.affinity }}
              - key: {{ $key }}
                operator: In
                values:
                - "{{ $val }}"
              {{- end }}
      {{- end }}
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: DoNotSchedule
        labelSelector:
          matchLabels:
            app: {{ .Values.service.name }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds | default "20"}}
      dnsConfig:
        options:
        - name: ndots
          value: "2"
      containers:
      - name: {{ .Values.service.name }}
        {{- if eq .Values.canary.enabled "true" }}
        image: "{{ .Values.image.repository }}{{ .Values.image.image }}:{{ .Values.canary.imagetag }}"
        {{- else }}
        image: "{{ .Values.image.repository }}{{ .Values.image.image }}:{{ .Values.image.tag }}"
        {{- end }}
        command: {{ .Values.service.start_command }}
        imagePullPolicy: Always
        {{- if eq .Values.service.judge_php.enable "true" }}
        securityContext:
          capabilities:
            add:
            - SYS_PTRACE
        {{- end }}
        ports:
        - name: serverport
          containerPort: {{ .Values.service.port }}
          protocol: TCP
        resources:
{{ toYaml .Values.resources | indent 10 }}
        {{- if .Values.startupProbe_enabled }}
        startupProbe:
{{ toYaml .Values.startupProbe | indent 10 }}
          initialDelaySeconds: 180
          periodSeconds: 5
          failureThreshold: 90
          successThreshold: 1
          timeoutSeconds: 1
        {{- end }}
        {{- if .Values.readinessProbe_enabled }}
        readinessProbe:
{{ toYaml .Values.readinessProbe | indent 10 }}
          initialDelaySeconds: 20
          periodSeconds: 5
          failureThreshold: 12
          successThreshold: 1
          timeoutSeconds: 1
        {{- end }}
        {{- if .Values.livenessProbe_enabled }}
        livenessProbe:
{{ toYaml .Values.livenessProbe | indent 10 }}
          initialDelaySeconds: 20
          periodSeconds: 5
          failureThreshold: 36
          successThreshold: 1
          timeoutSeconds: 1
        {{- end }}
        volumeMounts:
        - mountPath: {{ .Values.service.logPath }}
          name: app-logs
          subPathExpr: $(K8S_NAMESPACE)/$(K8S_SERVICE)/$(POD_NAME)/$(K8S_LANGUAGE)
        lifecycle:
          #预启动
          postStart:
            exec:
              command: {{ .Values.lifecycle.poststart_exec | default "['/bin/echo','-e','postStart is doing nothing']"}}
          #预停止
          preStop:
            exec:
              command: {{ .Values.lifecycle.prestop_exec | default "['/bin/echo','-e','preStop is doing nothing']"}}
        env:
        #service_env_locate don't delete
        - name: K8S_SERVICE
          value: {{ .Values.service.name }}
        - name: K8S_ENV
          value: {{ .Values.service.env }}
        - name: K8S_NAMESPACE
          value: {{ .Values.namespace }}
        - name: K8S_CLUSTER
          value: {{ .Values.cluster }}
        - name: K8S_APP_COUNTRY
          value: {{ .Values.service.app_country }}
        - name: K8S_LANGUAGE
          value: {{ .Values.service.language }}
        - name: NODE_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
                fieldPath: metadata.name
        - name: TZ
          value: UTC
      {{- if eq .Values.service.judge_php.enable "true" }}
      - name: nginx
        image: "993041778363.dkr.ecr.us-east-1.amazonaws.com/ops/sre/nginx/k8s-php-nginx-template:v4"
        command: ["bash","-c","/etc/nginx/start.sh"]
        imagePullPolicy: Always
        env:
        - name: K8S_SERVICE
          value: {{ .Values.service.name }}
        - name: K8S_PORT
          value: "{{ .Values.service.port }}"
        - name: K8S_ENV
          value: {{ .Values.service.env }}
        - name: K8S_NAMESPACE
          value: {{ .Values.namespace }}
        - name: K8S_CLUSTER
          value: {{ .Values.cluster }}
        - name: K8S_APP_COUNTRY
          value: {{ .Values.service.app_country }}
        - name: NODE_HOST_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: NODE_IP
          valueFrom:
            fieldRef:
              fieldPath: status.hostIP
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: POD_NAME
          valueFrom:
            fieldRef:
                fieldPath: metadata.name
        - name: TZ
          value: UTC
        resources:
          limits:
            cpu: "1"
            memory: 2Gi
          requests:
            cpu: "1"
            memory: 2Gi
        volumeMounts:
        - mountPath: "/var/log/nginx/phpsvc"
          name: app-logs
          subPathExpr: $(K8S_NAMESPACE)/$(K8S_SERVICE)/$(POD_NAME)/nginx
      {{- end }}
    {{- if .Values.needServiceaccount }}
      serviceAccountName: {{ .Values.service.name }}
    {{- else }}
      serviceAccountName: default
    {{- end }}
      securityContext:
        sysctls:
        - name: net.ipv4.ip_local_port_range
          value: 1024    65535
      volumes:
      - name: app-logs
        hostPath:
          path: /var/log/applog
          type: DirectoryOrCreate
